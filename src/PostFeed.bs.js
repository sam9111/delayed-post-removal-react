// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Post from "./post.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";

function s(prim) {
  return prim;
}

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* DeleteLater */0 :
        return {
                posts: state.posts,
                forDeletion: Belt_MapString.set(state.forDeletion, action._0.id, action._1)
              };
    case /* DeleteAbort */1 :
        return {
                posts: state.posts,
                forDeletion: Belt_MapString.remove(state.forDeletion, action._0.id)
              };
    case /* DeleteNow */2 :
        var post = action._0;
        return {
                posts: state.posts.filter(function (p) {
                      return p.id !== post.id;
                    }),
                forDeletion: Belt_MapString.remove(state.forDeletion, post.id)
              };
    
  }
}

function toKey(id, index) {
  return id + String(index);
}

function postText(post) {
  return Belt_Array.mapWithIndex(post.text, (function (index, line) {
                return React.createElement("p", {
                            key: post.id + String(index),
                            className: "mb-1 text-sm"
                          }, line);
              }));
}

function PostFeed$PostBlock(Props) {
  var post = Props.post;
  var dispatch = Props.dispatch;
  var state = Props.state;
  var match = React.useState(function () {
        return true;
      });
  var setshowPost = match[1];
  var showDelBlock = function (param) {
    Curry._1(dispatch, {
          TAG: /* DeleteLater */0,
          _0: post,
          _1: setTimeout((function (param) {
                  return Curry._1(dispatch, {
                              TAG: /* DeleteNow */2,
                              _0: post
                            });
                }), 10000)
        });
    return Curry._1(setshowPost, (function (param) {
                  return false;
                }));
  };
  var restorePost = function (param) {
    var timeoutId = Belt_MapString.get(state.forDeletion, post.id);
    if (timeoutId !== undefined) {
      clearTimeout(Caml_option.valFromOption(timeoutId));
      Curry._1(dispatch, {
            TAG: /* DeleteAbort */1,
            _0: post
          });
    }
    return Curry._1(setshowPost, (function (param) {
                  return true;
                }));
  };
  var deleteImmediate = function (param) {
    var timeoutId = Belt_MapString.get(state.forDeletion, post.id);
    if (timeoutId !== undefined) {
      clearTimeout(Caml_option.valFromOption(timeoutId));
      Curry._1(dispatch, {
            TAG: /* DeleteNow */2,
            _0: post
          });
    }
    return Curry._1(setshowPost, (function (param) {
                  return false;
                }));
  };
  if (match[0]) {
    return React.createElement("div", {
                className: "max-w-3xl mx-auto mt-8 relative"
              }, React.createElement("div", {
                    className: "bg-green-700 hover:bg-green-900 text-gray-300 hover:text-gray-100 px-8 py-4 mb-4"
                  }, React.createElement("h2", {
                        className: "text-2xl mb-1"
                      }, post.title), React.createElement("h3", {
                        className: "mb-4"
                      }, post.author), postText(post), React.createElement("button", {
                        className: "mr-4 mt-4 bg-red-500 hover:bg-red-900 text-white py-2 px-4",
                        onClick: showDelBlock
                      }, "Remove this post")));
  } else {
    return React.createElement("div", {
                className: "max-w-3xl mx-auto mt-8 relative bg-yellow-100 px-8 py-4 mb-4 h-40"
              }, React.createElement("p", {
                    className: "text-center white mb-1"
                  }, "This post from " + post.title + " by " + post.author + " will be permanently removed in 10 seconds."), React.createElement("div", {
                    className: "flex justify-center"
                  }, React.createElement("button", {
                        className: "mr-4 mt-4 bg-yellow-500 hover:bg-yellow-900 text-white py-2 px-4",
                        onClick: restorePost
                      }, "Restore"), React.createElement("button", {
                        className: "mr-4 mt-4 bg-red-500 hover:bg-red-900 text-white py-2 px-4",
                        onClick: deleteImmediate
                      }, "Delete Immediately")), React.createElement("div", {
                    className: "bg-red-500 h-2 w-full absolute top-0 left-0 progress"
                  }));
  }
}

var PostBlock = {
  make: PostFeed$PostBlock
};

var initialState = {
  posts: Post.examples,
  forDeletion: undefined
};

function PostFeed(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  return Belt_Array.map(state.posts, (function (post) {
                return React.createElement(PostFeed$PostBlock, {
                            post: post,
                            dispatch: dispatch,
                            state: state,
                            key: post.id
                          });
              }));
}

var make = PostFeed;

export {
  s ,
  reducer ,
  toKey ,
  postText ,
  PostBlock ,
  initialState ,
  make ,
  
}
/* Post Not a pure module */
